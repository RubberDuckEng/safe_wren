<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
07: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
08: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
09: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Closure(1, [])
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Method(instance, init new())
08 (ln 2): Closure(2, [])
09 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
10 (ln 2): Method(static, new())
11 (ln 6): Closure(3, [])
12 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 6): Method(instance, getter)
14 (ln 10): Closure(4, [])
15 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 10): Method(instance, setter=_)
17 (ln 14): Closure(5, [])
18 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 14): Method(instance, method(_))
20 (ln 17): Constant(6: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
21 (ln 17): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
22 (ln 17): Class(0 fields)
23 (ln 17): Store(Module)
24 (ln 17): Pop
25 (ln 18): Closure(7, [])
26 (ln 18): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
27 (ln 18): Method(instance, init new())
28 (ln 18): Closure(8, [])
29 (ln 18): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
30 (ln 18): Method(static, new())
31 (ln 24): Closure(9, [])
32 (ln 24): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
33 (ln 24): Method(instance, test)
34 (ln 27): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
35 (ln 27): Call(new())
36 (ln 27): Call(test)
37 (ln 27): Pop
38 (ln 28): EndModule
39 (ln 28): Return
40 (ln 28): End
init new() Code:
00 (ln 2): Load(Local, 0)
01 (ln 2): Return
02 (ln 2): End
 Code:
00 (ln 2): Construct
01 (ln 2): Call(init new())
02 (ln 2): Return
03 (ln 2): End
getter Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
getter Code:
00 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 5): Call(print(_))
03 (ln 5): Pop
04 (ln 6): Null
05 (ln 6): Return
06 (ln 6): End
setter=_ Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
setter=_ Code:
00 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 9): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 9): Call(print(_))
03 (ln 9): Pop
04 (ln 10): Null
05 (ln 10): Return
06 (ln 10): End
method(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_) Code:
00 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 13): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 13): Call(print(_))
03 (ln 13): Pop
04 (ln 14): Null
05 (ln 14): Return
06 (ln 14): End
init new() Code:
00 (ln 18): Load(Local, 0)
01 (ln 18): Return
02 (ln 18): End
 Code:
00 (ln 18): Construct
01 (ln 18): Call(init new())
02 (ln 18): Return
03 (ln 18): End
test Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
test Code:
00 (ln 21): Load(Local, 0)
01 (ln 21): Call(getter)
02 (ln 21): Pop
03 (ln 22): Load(Local, 0)
04 (ln 22): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 22): Call(setter=_)
06 (ln 22): Pop
07 (ln 23): Load(Local, 0)
08 (ln 23): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 23): Call(method(_))
10 (ln 23): Pop
11 (ln 24): Null
12 (ln 24): Return
13 (ln 24): End
