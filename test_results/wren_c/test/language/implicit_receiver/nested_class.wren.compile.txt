<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Closure(1, [])
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Method(instance, init new())
08 (ln 2): Closure(2, [])
09 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
10 (ln 2): Method(static, new())
11 (ln 6): Closure(3, [])
12 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 6): Method(instance, getter)
14 (ln 10): Closure(4, [])
15 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 10): Method(instance, setter=_)
17 (ln 14): Closure(5, [])
18 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 14): Method(instance, method(_))
20 (ln 48): Closure(6, [])
21 (ln 48): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
22 (ln 48): Method(instance, test)
23 (ln 51): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
24 (ln 51): Call(new())
25 (ln 51): Call(test)
26 (ln 51): Pop
27 (ln 52): EndModule
28 (ln 52): Return
29 (ln 52): End
init new() Code:
00 (ln 2): Load(Local, 0)
01 (ln 2): Return
02 (ln 2): End
 Code:
00 (ln 2): Construct
01 (ln 2): Call(init new())
02 (ln 2): Return
03 (ln 2): End
getter Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
getter Code:
00 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 5): Call(print(_))
03 (ln 5): Pop
04 (ln 6): Null
05 (ln 6): Return
06 (ln 6): End
setter=_ Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
setter=_ Code:
00 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 9): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 9): Call(print(_))
03 (ln 9): Pop
04 (ln 10): Null
05 (ln 10): Return
06 (ln 10): End
method(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_) Code:
00 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 13): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 13): Call(print(_))
03 (ln 13): Pop
04 (ln 14): Null
05 (ln 14): Return
06 (ln 14): End
test Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
07: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
08: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
test Code:
00 (ln 17): Load(Local, 0)
01 (ln 17): Call(getter)
02 (ln 17): Pop
03 (ln 18): Load(Local, 0)
04 (ln 18): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 18): Call(setter=_)
06 (ln 18): Pop
07 (ln 19): Load(Local, 0)
08 (ln 19): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 19): Call(method(_))
10 (ln 19): Pop
11 (ln 21): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
12 (ln 21): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 21): Class(0 fields)
14 (ln 22): Closure(3, [])
15 (ln 22): Load(Local, 1)
16 (ln 22): Method(instance, init new())
17 (ln 22): Closure(4, [])
18 (ln 22): Load(Local, 1)
19 (ln 22): Method(static, new())
20 (ln 26): Closure(5, [])
21 (ln 26): Load(Local, 1)
22 (ln 26): Method(instance, getter)
23 (ln 30): Closure(6, [])
24 (ln 30): Load(Local, 1)
25 (ln 30): Method(instance, setter=_)
26 (ln 34): Closure(7, [])
27 (ln 34): Load(Local, 1)
28 (ln 34): Method(instance, method(_))
29 (ln 40): Closure(8, [])
30 (ln 40): Load(Local, 1)
31 (ln 40): Method(instance, test)
32 (ln 43): Load(Local, 1)
33 (ln 43): Call(new())
34 (ln 43): Call(test)
35 (ln 43): Pop
36 (ln 45): Load(Local, 0)
37 (ln 45): Call(getter)
38 (ln 45): Pop
39 (ln 46): Load(Local, 0)
40 (ln 46): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
41 (ln 46): Call(setter=_)
42 (ln 46): Pop
43 (ln 47): Load(Local, 0)
44 (ln 47): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
45 (ln 47): Call(method(_))
46 (ln 47): Pop
47 (ln 48): Null
48 (ln 48): Return
49 (ln 48): End
init new() Code:
00 (ln 22): Load(Local, 0)
01 (ln 22): Return
02 (ln 22): End
 Code:
00 (ln 22): Construct
01 (ln 22): Call(init new())
02 (ln 22): Return
03 (ln 22): End
getter Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
getter Code:
00 (ln 25): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 25): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 25): Call(print(_))
03 (ln 25): Pop
04 (ln 26): Null
05 (ln 26): Return
06 (ln 26): End
setter=_ Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
setter=_ Code:
00 (ln 29): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 29): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 29): Call(print(_))
03 (ln 29): Pop
04 (ln 30): Null
05 (ln 30): Return
06 (ln 30): End
method(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_) Code:
00 (ln 33): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 33): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 33): Call(print(_))
03 (ln 33): Pop
04 (ln 34): Null
05 (ln 34): Return
06 (ln 34): End
test Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
test Code:
00 (ln 37): Load(Local, 0)
01 (ln 37): Call(getter)
02 (ln 37): Pop
03 (ln 38): Load(Local, 0)
04 (ln 38): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 38): Call(setter=_)
06 (ln 38): Pop
07 (ln 39): Load(Local, 0)
08 (ln 39): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 39): Call(method(_))
10 (ln 39): Pop
11 (ln 40): Null
12 (ln 40): Return
13 (ln 40): End
