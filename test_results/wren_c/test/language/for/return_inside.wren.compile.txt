<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Closure(0, [])
02 (ln 5): Call(new(_))
03 (ln 5): Store(Module)
04 (ln 5): Pop
05 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
06 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 7): Call(call())
08 (ln 7): Call(print(_))
09 (ln 7): Pop
10 (ln 9): EndModule
11 (ln 9): Return
12 (ln 9): End
new(_) block argument Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
new(_) block argument Code:
00 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 2): Call(new())
02 (ln 2): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 2): Call(addCore_(_))
04 (ln 2): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 2): Call(addCore_(_))
06 (ln 2): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Call(addCore_(_))
08 (ln 2): Null
09 (ln 2): Load(Local, 1)
10 (ln 2): Load(Local, 2)
11 (ln 2): Call(iterate(_))
12 (ln 2): Store(Local, 2)
13 (ln 2): JumpIfFalse(7)
14 (ln 2): Load(Local, 1)
15 (ln 2): Load(Local, 2)
16 (ln 2): Call(iteratorValue(_))
17 (ln 3): Load(Local, 3)
18 (ln 3): Return
19 (ln 4): Pop
20 (ln 4): Loop(12)
21 (ln 4): Pop
22 (ln 4): Pop
23 (ln 5): Null
24 (ln 5): Return
25 (ln 5): End
