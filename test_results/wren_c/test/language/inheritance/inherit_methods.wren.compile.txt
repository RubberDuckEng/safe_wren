<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
07: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
08: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
09: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
11: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
13: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
14: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
15: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Closure(1, [])
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Method(instance, methodOnFoo)
08 (ln 3): Closure(2, [])
09 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
10 (ln 3): Method(instance, method(_))
11 (ln 4): Closure(3, [])
12 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 4): Method(instance, method(_,_,_))
14 (ln 5): Closure(4, [])
15 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 5): Method(instance, override)
17 (ln 8): Constant(5: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
18 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 8): Class(0 fields)
20 (ln 8): Store(Module)
21 (ln 8): Pop
22 (ln 9): Closure(6, [])
23 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
24 (ln 9): Method(instance, init new())
25 (ln 9): Closure(7, [])
26 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
27 (ln 9): Method(static, new())
28 (ln 10): Closure(8, [])
29 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
30 (ln 10): Method(instance, methodOnBar)
31 (ln 11): Closure(9, [])
32 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
33 (ln 11): Method(instance, method(_,_))
34 (ln 12): Closure(10, [])
35 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
36 (ln 12): Method(instance, method(_,_,_,_))
37 (ln 13): Closure(11, [])
38 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
39 (ln 13): Method(instance, override)
40 (ln 16): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
41 (ln 16): Call(new())
42 (ln 16): Store(Module)
43 (ln 16): Pop
44 (ln 17): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
45 (ln 17): Call(methodOnFoo)
46 (ln 17): Pop
47 (ln 18): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
48 (ln 18): Call(methodOnBar)
49 (ln 18): Pop
50 (ln 21): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
51 (ln 21): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
52 (ln 21): Call(method(_))
53 (ln 21): Pop
54 (ln 22): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
55 (ln 22): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
56 (ln 22): Constant(13: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
57 (ln 22): Call(method(_,_))
58 (ln 22): Pop
59 (ln 23): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
60 (ln 23): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
61 (ln 23): Constant(13: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
62 (ln 23): Constant(14: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
63 (ln 23): Call(method(_,_,_))
64 (ln 23): Pop
65 (ln 24): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
66 (ln 24): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
67 (ln 24): Constant(13: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
68 (ln 24): Constant(14: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
69 (ln 24): Constant(15: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
70 (ln 24): Call(method(_,_,_,_))
71 (ln 24): Pop
72 (ln 25): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
73 (ln 25): Call(override)
74 (ln 25): Pop
75 (ln 26): EndModule
76 (ln 26): Return
77 (ln 26): End
methodOnFoo Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
methodOnFoo Code:
00 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 2): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 2): Call(print(_))
03 (ln 2): Return
04 (ln 2): End
method(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_) Code:
00 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 3): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 3): Call(print(_))
03 (ln 3): Return
04 (ln 3): End
method(_,_,_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_,_,_) Code:
00 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 4): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 4): Call(print(_))
03 (ln 4): Return
04 (ln 4): End
override Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
override Code:
00 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 5): Call(print(_))
03 (ln 5): Return
04 (ln 5): End
init new() Code:
00 (ln 9): Load(Local, 0)
01 (ln 9): Return
02 (ln 9): End
 Code:
00 (ln 9): Construct
01 (ln 9): Call(init new())
02 (ln 9): Return
03 (ln 9): End
methodOnBar Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
methodOnBar Code:
00 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 10): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 10): Call(print(_))
03 (ln 10): Return
04 (ln 10): End
method(_,_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_,_) Code:
00 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 11): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 11): Call(print(_))
03 (ln 11): Return
04 (ln 11): End
method(_,_,_,_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method(_,_,_,_) Code:
00 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 12): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 12): Call(print(_))
03 (ln 12): Return
04 (ln 12): End
override Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
override Code:
00 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 13): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 13): Call(print(_))
03 (ln 13): Return
04 (ln 13): End
