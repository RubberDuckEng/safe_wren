<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 2): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 2): Store(Module)
02 (ln 2): Pop
03 (ln 3): Boolean true
04 (ln 3): JumpIfFalse(2)
05 (ln 4): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
06 (ln 5): Pop
07 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
08 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 6): Call(print(_))
10 (ln 6): Pop
11 (ln 9): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
12 (ln 9): Store(Module)
13 (ln 9): Pop
14 (ln 10): Boolean false
15 (ln 10): JumpIfFalse(3)
16 (ln 10): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 10): Pop
18 (ln 10): Jump(2)
19 (ln 11): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
20 (ln 12): Pop
21 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
22 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
23 (ln 13): Call(print(_))
24 (ln 13): Pop
25 (ln 14): EndModule
26 (ln 14): Return
27 (ln 14): End
