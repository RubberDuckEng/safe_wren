<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Closure(1, [])
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Method(instance, init new())
08 (ln 2): Closure(2, [])
09 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
10 (ln 2): Method(static, new())
11 (ln 21): Closure(3, [])
12 (ln 21): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 21): Method(instance, method)
14 (ln 23): Closure(4, [])
15 (ln 23): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 23): Method(instance, toString)
17 (ln 26): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
18 (ln 26): Call(new())
19 (ln 26): Call(method)
20 (ln 26): Pop
21 (ln 27): EndModule
22 (ln 27): Return
23 (ln 27): End
init new() Code:
00 (ln 2): Load(Local, 0)
01 (ln 2): Return
02 (ln 2): End
 Code:
00 (ln 2): Construct
01 (ln 2): Call(init new())
02 (ln 2): Return
03 (ln 2): End
method Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
method Code:
00 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Load(Local, 0)
02 (ln 5): Call(print(_))
03 (ln 5): Pop
04 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 20): Closure(0, [Upvalue { is_local_in_parent: true, index: 0 }])
06 (ln 20): Call(new(_))
07 (ln 20): Call(call())
08 (ln 20): Pop
09 (ln 21): Null
10 (ln 21): Return
11 (ln 21): End
toString Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
toString Code:
00 (ln 23): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 23): Return
02 (ln 23): End
new(_) block argument Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
new(_) block argument Code:
00 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 8): Load(Upvalue, 0)
02 (ln 8): Call(print(_))
03 (ln 8): Pop
04 (ln 10): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
06 (ln 10): Class(0 fields)
07 (ln 11): Closure(1, [])
08 (ln 11): Load(Local, 1)
09 (ln 11): Method(instance, init new())
10 (ln 11): Closure(2, [])
11 (ln 11): Load(Local, 1)
12 (ln 11): Method(static, new())
13 (ln 15): Closure(3, [])
14 (ln 15): Load(Local, 1)
15 (ln 15): Method(instance, method)
16 (ln 16): Closure(4, [])
17 (ln 16): Load(Local, 1)
18 (ln 16): Method(instance, toString)
19 (ln 19): Load(Local, 1)
20 (ln 19): Call(new())
21 (ln 19): Call(method)
22 (ln 19): Pop
23 (ln 20): Null
24 (ln 20): Return
25 (ln 20): End
init new() Code:
00 (ln 11): Load(Local, 0)
01 (ln 11): Return
02 (ln 11): End
 Code:
00 (ln 11): Construct
01 (ln 11): Call(init new())
02 (ln 11): Return
03 (ln 11): End
method Code:
00 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 14): Load(Local, 0)
02 (ln 14): Call(print(_))
03 (ln 14): Pop
04 (ln 15): Null
05 (ln 15): Return
06 (ln 15): End
toString Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
toString Code:
00 (ln 16): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 16): Return
02 (ln 16): End
