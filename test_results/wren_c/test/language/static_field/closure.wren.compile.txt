<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Null
06 (ln 2): Closure(1, [Upvalue { is_local_in_parent: true, index: 1 }])
07 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
08 (ln 2): Method(static, initialize)
09 (ln 6): Closure(2, [Upvalue { is_local_in_parent: true, index: 1 }])
10 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 6): Method(static, closeOverGet)
12 (ln 10): Closure(3, [Upvalue { is_local_in_parent: true, index: 1 }])
13 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
14 (ln 10): Method(static, closeOverSet)
15 (ln 11): CloseUpvalues
16 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 13): Call(initialize)
18 (ln 13): Pop
19 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
20 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
21 (ln 14): Call(closeOverGet)
22 (ln 14): Call(call())
23 (ln 14): Call(print(_))
24 (ln 14): Pop
25 (ln 15): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
26 (ln 15): Call(closeOverSet)
27 (ln 15): Call(call())
28 (ln 15): Pop
29 (ln 16): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
30 (ln 16): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
31 (ln 16): Call(closeOverGet)
32 (ln 16): Call(call())
33 (ln 16): Call(print(_))
34 (ln 16): Pop
35 (ln 17): EndModule
36 (ln 17): Return
37 (ln 17): End
initialize Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
initialize Code:
00 (ln 2): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 2): Store(Upvalue, 0)
02 (ln 2): Return
03 (ln 2): End
closeOverGet Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
closeOverGet Code:
00 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Closure(0, [Upvalue { is_local_in_parent: false, index: 0 }])
02 (ln 5): Call(new(_))
03 (ln 5): Return
04 (ln 6): Null
05 (ln 6): Return
06 (ln 6): End
closeOverSet Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
closeOverSet Code:
00 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 9): Closure(0, [Upvalue { is_local_in_parent: false, index: 0 }])
02 (ln 9): Call(new(_))
03 (ln 9): Return
04 (ln 10): Null
05 (ln 10): Return
06 (ln 10): End
new(_) block argument Code:
00 (ln 5): Load(Upvalue, 0)
01 (ln 5): Return
02 (ln 5): End
new(_) block argument Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
new(_) block argument Code:
00 (ln 9): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 9): Store(Upvalue, 0)
02 (ln 9): Return
03 (ln 9): End
