<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Call(new())
02 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 1): Call(addCore_(_))
04 (ln 1): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 1): Call(addCore_(_))
06 (ln 1): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 1): Call(addCore_(_))
08 (ln 1): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 1): Call(addCore_(_))
10 (ln 1): Constant(4: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 1): Call(addCore_(_))
12 (ln 1): Null
13 (ln 1): Load(Local, 1)
14 (ln 1): Load(Local, 2)
15 (ln 1): Call(iterate(_))
16 (ln 1): Store(Local, 2)
17 (ln 1): JumpIfFalse(19)
18 (ln 1): Load(Local, 1)
19 (ln 1): Load(Local, 2)
20 (ln 1): Call(iteratorValue(_))
21 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
22 (ln 2): Load(Local, 3)
23 (ln 2): Call(print(_))
24 (ln 2): Pop
25 (ln 3): Load(Local, 3)
26 (ln 3): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
27 (ln 3): Call(>(_))
28 (ln 3): JumpIfFalse(2)
29 (ln 3): Pop
30 (ln 3): Jump(6)
31 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
32 (ln 4): Load(Local, 3)
33 (ln 4): Call(print(_))
34 (ln 4): Pop
35 (ln 5): Pop
36 (ln 5): Loop(24)
37 (ln 5): Pop
38 (ln 5): Pop
39 (ln 11): EndModule
40 (ln 11): Return
41 (ln 11): End
