<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Call(..(_))
03 (ln 1): Null
04 (ln 1): Load(Local, 1)
05 (ln 1): Load(Local, 2)
06 (ln 1): Call(iterate(_))
07 (ln 1): Store(Local, 2)
08 (ln 1): JumpIfFalse(24)
09 (ln 1): Load(Local, 1)
10 (ln 1): Load(Local, 2)
11 (ln 1): Call(iteratorValue(_))
12 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 2): Load(Local, 3)
14 (ln 2): Call(print(_))
15 (ln 2): Pop
16 (ln 5): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 7): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
18 (ln 9): Constant(4: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 10): Load(Local, 3)
20 (ln 10): Constant(5: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
21 (ln 10): Call(>(_))
22 (ln 10): JumpIfFalse(5)
23 (ln 10): Pop
24 (ln 10): Pop
25 (ln 10): Pop
26 (ln 10): Pop
27 (ln 10): Jump(5)
28 (ln 11): Pop
29 (ln 12): Pop
30 (ln 13): Pop
31 (ln 14): Pop
32 (ln 14): Loop(29)
33 (ln 14): Pop
34 (ln 14): Pop
35 (ln 19): EndModule
36 (ln 19): Return
37 (ln 19): End
