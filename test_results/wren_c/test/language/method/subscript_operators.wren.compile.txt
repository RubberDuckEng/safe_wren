<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
07: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
08: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
09: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
11: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Closure(1, [])
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Method(instance, init new())
08 (ln 2): Closure(2, [])
09 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
10 (ln 2): Method(static, new())
11 (ln 3): Closure(3, [])
12 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 3): Method(instance, [_])
14 (ln 4): Closure(4, [])
15 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 4): Method(instance, [_,_])
17 (ln 5): Closure(5, [])
18 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 5): Method(instance, [_,_,_])
20 (ln 6): Closure(6, [])
21 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
22 (ln 6): Method(instance, [_]=(_))
23 (ln 7): Closure(7, [])
24 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
25 (ln 7): Method(instance, [_,_]=(_))
26 (ln 8): Closure(8, [])
27 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
28 (ln 8): Method(instance, [_,_,_]=(_))
29 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
30 (ln 11): Call(new())
31 (ln 11): Store(Module)
32 (ln 11): Pop
33 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
34 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
35 (ln 12): Constant(9: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
36 (ln 12): Call([_])
37 (ln 12): Call(print(_))
38 (ln 12): Pop
39 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
40 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
41 (ln 13): Constant(9: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
42 (ln 13): Constant(10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
43 (ln 13): Call([_,_])
44 (ln 13): Call(print(_))
45 (ln 13): Pop
46 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
47 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
48 (ln 14): Constant(9: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
49 (ln 14): Constant(10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
50 (ln 14): Constant(11: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
51 (ln 14): Call([_,_,_])
52 (ln 14): Call(print(_))
53 (ln 14): Pop
54 (ln 15): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
55 (ln 15): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
56 (ln 15): Constant(9: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
57 (ln 15): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
58 (ln 15): Call([_]=(_))
59 (ln 15): Call(print(_))
60 (ln 15): Pop
61 (ln 16): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
62 (ln 16): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
63 (ln 16): Constant(9: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
64 (ln 16): Constant(10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
65 (ln 16): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
66 (ln 16): Call([_,_]=(_))
67 (ln 16): Call(print(_))
68 (ln 16): Pop
69 (ln 17): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
70 (ln 17): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
71 (ln 17): Constant(9: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
72 (ln 17): Constant(10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
73 (ln 17): Constant(11: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
74 (ln 17): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
75 (ln 17): Call([_,_,_]=(_))
76 (ln 17): Call(print(_))
77 (ln 17): Pop
78 (ln 18): EndModule
79 (ln 18): Return
80 (ln 18): End
init new() Code:
00 (ln 2): Load(Local, 0)
01 (ln 2): Return
02 (ln 2): End
 Code:
00 (ln 2): Construct
01 (ln 2): Call(init new())
02 (ln 2): Return
03 (ln 2): End
[_] Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
[_] Code:
00 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 3): Call(new())
02 (ln 3): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 3): Call(addCore_(_))
04 (ln 3): Load(Local, 1)
05 (ln 3): Call(addCore_(_))
06 (ln 3): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 3): Call(addCore_(_))
08 (ln 3): Call(join())
09 (ln 3): Return
10 (ln 3): End
[_,_] Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
[_,_] Code:
00 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 4): Call(new())
02 (ln 4): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 4): Call(addCore_(_))
04 (ln 4): Load(Local, 1)
05 (ln 4): Call(addCore_(_))
06 (ln 4): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 4): Call(addCore_(_))
08 (ln 4): Load(Local, 2)
09 (ln 4): Call(addCore_(_))
10 (ln 4): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 4): Call(addCore_(_))
12 (ln 4): Call(join())
13 (ln 4): Return
14 (ln 4): End
[_,_,_] Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
[_,_,_] Code:
00 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 5): Call(new())
02 (ln 5): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 5): Call(addCore_(_))
04 (ln 5): Load(Local, 1)
05 (ln 5): Call(addCore_(_))
06 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 5): Call(addCore_(_))
08 (ln 5): Load(Local, 2)
09 (ln 5): Call(addCore_(_))
10 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 5): Call(addCore_(_))
12 (ln 5): Load(Local, 3)
13 (ln 5): Call(addCore_(_))
14 (ln 5): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
15 (ln 5): Call(addCore_(_))
16 (ln 5): Call(join())
17 (ln 5): Return
18 (ln 5): End
[_]=(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
[_]=(_) Code:
00 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 6): Call(new())
02 (ln 6): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 6): Call(addCore_(_))
04 (ln 6): Load(Local, 1)
05 (ln 6): Call(addCore_(_))
06 (ln 6): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 6): Call(addCore_(_))
08 (ln 6): Load(Local, 2)
09 (ln 6): Call(addCore_(_))
10 (ln 6): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 6): Call(addCore_(_))
12 (ln 6): Call(join())
13 (ln 6): Return
14 (ln 6): End
[_,_]=(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
[_,_]=(_) Code:
00 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 7): Call(new())
02 (ln 7): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 7): Call(addCore_(_))
04 (ln 7): Load(Local, 1)
05 (ln 7): Call(addCore_(_))
06 (ln 7): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 7): Call(addCore_(_))
08 (ln 7): Load(Local, 2)
09 (ln 7): Call(addCore_(_))
10 (ln 7): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 7): Call(addCore_(_))
12 (ln 7): Load(Local, 3)
13 (ln 7): Call(addCore_(_))
14 (ln 7): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
15 (ln 7): Call(addCore_(_))
16 (ln 7): Call(join())
17 (ln 7): Return
18 (ln 7): End
[_,_,_]=(_) Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
[_,_,_]=(_) Code:
00 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 8): Call(new())
02 (ln 8): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 8): Call(addCore_(_))
04 (ln 8): Load(Local, 1)
05 (ln 8): Call(addCore_(_))
06 (ln 8): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 8): Call(addCore_(_))
08 (ln 8): Load(Local, 2)
09 (ln 8): Call(addCore_(_))
10 (ln 8): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 8): Call(addCore_(_))
12 (ln 8): Load(Local, 3)
13 (ln 8): Call(addCore_(_))
14 (ln 8): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
15 (ln 8): Call(addCore_(_))
16 (ln 8): Load(Local, 4)
17 (ln 8): Call(addCore_(_))
18 (ln 8): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 8): Call(addCore_(_))
20 (ln 8): Call(join())
21 (ln 8): Return
22 (ln 8): End
