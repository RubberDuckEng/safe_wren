<script> Constants:
00: "Foo"
01: Fn(+(_))
02: Fn(-(_))
03: Fn(*(_))
04: Fn(/(_))
05: Fn(%(_))
06: Fn(<(_))
07: Fn(>(_))
08: Fn(<=(_))
09: Fn(>=(_))
10: Fn(==(_))
11: Fn(!=(_))
12: Fn(&(_))
13: Fn(|(_))
14: Fn(is(_))
15: Fn(!)
16: Fn(~)
17: Fn(-)
18: Fn([_])
19: Fn([_,_])
20: Fn([_,_,_])
21: Fn([_]=(_))
22: Fn([_,_]=(_))
23: Fn([_,_,_]=(_))
24: "a"
25: "b"
26: "c"
27: "value"
<script> Code:
00 (ln 1): Constant(0: "Foo")
01 (ln 1): Load(Module, Class("Object"))
02 (ln 1): Class(0 fields)
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 2): Closure(1, [])
06 (ln 2): Load(Module, Null)
07 (ln 2): Method(static, +(_))
08 (ln 3): Closure(2, [])
09 (ln 3): Load(Module, Null)
10 (ln 3): Method(static, -(_))
11 (ln 4): Closure(3, [])
12 (ln 4): Load(Module, Null)
13 (ln 4): Method(static, *(_))
14 (ln 5): Closure(4, [])
15 (ln 5): Load(Module, Null)
16 (ln 5): Method(static, /(_))
17 (ln 6): Closure(5, [])
18 (ln 6): Load(Module, Null)
19 (ln 6): Method(static, %(_))
20 (ln 7): Closure(6, [])
21 (ln 7): Load(Module, Null)
22 (ln 7): Method(static, <(_))
23 (ln 8): Closure(7, [])
24 (ln 8): Load(Module, Null)
25 (ln 8): Method(static, >(_))
26 (ln 9): Closure(8, [])
27 (ln 9): Load(Module, Null)
28 (ln 9): Method(static, <=(_))
29 (ln 10): Closure(9, [])
30 (ln 10): Load(Module, Null)
31 (ln 10): Method(static, >=(_))
32 (ln 11): Closure(10, [])
33 (ln 11): Load(Module, Null)
34 (ln 11): Method(static, ==(_))
35 (ln 12): Closure(11, [])
36 (ln 12): Load(Module, Null)
37 (ln 12): Method(static, !=(_))
38 (ln 13): Closure(12, [])
39 (ln 13): Load(Module, Null)
40 (ln 13): Method(static, &(_))
41 (ln 14): Closure(13, [])
42 (ln 14): Load(Module, Null)
43 (ln 14): Method(static, |(_))
44 (ln 15): Closure(14, [])
45 (ln 15): Load(Module, Null)
46 (ln 15): Method(static, is(_))
47 (ln 17): Closure(15, [])
48 (ln 17): Load(Module, Null)
49 (ln 17): Method(static, !)
50 (ln 18): Closure(16, [])
51 (ln 18): Load(Module, Null)
52 (ln 18): Method(static, ~)
53 (ln 19): Closure(17, [])
54 (ln 19): Load(Module, Null)
55 (ln 19): Method(static, -)
56 (ln 21): Closure(18, [])
57 (ln 21): Load(Module, Null)
58 (ln 21): Method(static, [_])
59 (ln 22): Closure(19, [])
60 (ln 22): Load(Module, Null)
61 (ln 22): Method(static, [_,_])
62 (ln 23): Closure(20, [])
63 (ln 23): Load(Module, Null)
64 (ln 23): Method(static, [_,_,_])
65 (ln 24): Closure(21, [])
66 (ln 24): Load(Module, Null)
67 (ln 24): Method(static, [_]=(_))
68 (ln 25): Closure(22, [])
69 (ln 25): Load(Module, Null)
70 (ln 25): Method(static, [_,_]=(_))
71 (ln 26): Closure(23, [])
72 (ln 26): Load(Module, Null)
73 (ln 26): Method(static, [_,_,_]=(_))
74 (ln 29): Load(Module, Class("System"))
75 (ln 29): Load(Module, Null)
76 (ln 29): Constant(24: "a")
77 (ln 29): Call(Method, +(_))
78 (ln 29): Call(Method, print(_))
79 (ln 29): Pop
80 (ln 30): Load(Module, Class("System"))
81 (ln 30): Load(Module, Null)
82 (ln 30): Constant(24: "a")
83 (ln 30): Call(Method, -(_))
84 (ln 30): Call(Method, print(_))
85 (ln 30): Pop
86 (ln 31): Load(Module, Class("System"))
87 (ln 31): Load(Module, Null)
88 (ln 31): Constant(24: "a")
89 (ln 31): Call(Method, *(_))
90 (ln 31): Call(Method, print(_))
91 (ln 31): Pop
92 (ln 32): Load(Module, Class("System"))
93 (ln 32): Load(Module, Null)
94 (ln 32): Constant(24: "a")
95 (ln 32): Call(Method, /(_))
96 (ln 32): Call(Method, print(_))
97 (ln 32): Pop
98 (ln 33): Load(Module, Class("System"))
99 (ln 33): Load(Module, Null)
100 (ln 33): Constant(24: "a")
101 (ln 33): Call(Method, %(_))
102 (ln 33): Call(Method, print(_))
103 (ln 33): Pop
104 (ln 34): Load(Module, Class("System"))
105 (ln 34): Load(Module, Null)
106 (ln 34): Constant(24: "a")
107 (ln 34): Call(Method, <(_))
108 (ln 34): Call(Method, print(_))
109 (ln 34): Pop
110 (ln 35): Load(Module, Class("System"))
111 (ln 35): Load(Module, Null)
112 (ln 35): Constant(24: "a")
113 (ln 35): Call(Method, >(_))
114 (ln 35): Call(Method, print(_))
115 (ln 35): Pop
116 (ln 36): Load(Module, Class("System"))
117 (ln 36): Load(Module, Null)
118 (ln 36): Constant(24: "a")
119 (ln 36): Call(Method, <=(_))
120 (ln 36): Call(Method, print(_))
121 (ln 36): Pop
122 (ln 37): Load(Module, Class("System"))
123 (ln 37): Load(Module, Null)
124 (ln 37): Constant(24: "a")
125 (ln 37): Call(Method, >=(_))
126 (ln 37): Call(Method, print(_))
127 (ln 37): Pop
128 (ln 38): Load(Module, Class("System"))
129 (ln 38): Load(Module, Null)
130 (ln 38): Constant(24: "a")
131 (ln 38): Call(Method, ==(_))
132 (ln 38): Call(Method, print(_))
133 (ln 38): Pop
134 (ln 39): Load(Module, Class("System"))
135 (ln 39): Load(Module, Null)
136 (ln 39): Constant(24: "a")
137 (ln 39): Call(Method, !=(_))
138 (ln 39): Call(Method, print(_))
139 (ln 39): Pop
140 (ln 40): Load(Module, Class("System"))
141 (ln 40): Load(Module, Null)
142 (ln 40): Constant(24: "a")
143 (ln 40): Call(Method, &(_))
144 (ln 40): Call(Method, print(_))
145 (ln 40): Pop
146 (ln 41): Load(Module, Class("System"))
147 (ln 41): Load(Module, Null)
148 (ln 41): Constant(24: "a")
149 (ln 41): Call(Method, |(_))
150 (ln 41): Call(Method, print(_))
151 (ln 41): Pop
152 (ln 42): Load(Module, Class("System"))
153 (ln 42): Load(Module, Null)
154 (ln 42): Call(Method, !)
155 (ln 42): Call(Method, print(_))
156 (ln 42): Pop
157 (ln 43): Load(Module, Class("System"))
158 (ln 43): Load(Module, Null)
159 (ln 43): Call(Method, ~)
160 (ln 43): Call(Method, print(_))
161 (ln 43): Pop
162 (ln 44): Load(Module, Class("System"))
163 (ln 44): Load(Module, Null)
164 (ln 44): Call(Method, -)
165 (ln 44): Call(Method, print(_))
166 (ln 44): Pop
167 (ln 45): Load(Module, Class("System"))
168 (ln 45): Load(Module, Null)
169 (ln 45): Constant(24: "a")
170 (ln 45): Call(Method, is(_))
171 (ln 45): Call(Method, print(_))
172 (ln 45): Pop
173 (ln 47): Load(Module, Class("System"))
174 (ln 47): Load(Module, Null)
175 (ln 47): Constant(24: "a")
176 (ln 47): Call(Subscript, [_])
177 (ln 47): Call(Method, print(_))
178 (ln 47): Pop
179 (ln 48): Load(Module, Class("System"))
180 (ln 48): Load(Module, Null)
181 (ln 48): Constant(24: "a")
182 (ln 48): Constant(25: "b")
183 (ln 48): Call(Subscript, [_,_])
184 (ln 48): Call(Method, print(_))
185 (ln 48): Pop
186 (ln 49): Load(Module, Class("System"))
187 (ln 49): Load(Module, Null)
188 (ln 49): Constant(24: "a")
189 (ln 49): Constant(25: "b")
190 (ln 49): Constant(26: "c")
191 (ln 49): Call(Subscript, [_,_,_])
192 (ln 49): Call(Method, print(_))
193 (ln 49): Pop
194 (ln 50): Load(Module, Class("System"))
195 (ln 50): Load(Module, Null)
196 (ln 50): Constant(24: "a")
197 (ln 50): Constant(27: "value")
198 (ln 50): Call(SubscriptSetter, [_]=(_))
199 (ln 50): Call(Method, print(_))
200 (ln 50): Pop
201 (ln 51): Load(Module, Class("System"))
202 (ln 51): Load(Module, Null)
203 (ln 51): Constant(24: "a")
204 (ln 51): Constant(25: "b")
205 (ln 51): Constant(27: "value")
206 (ln 51): Call(SubscriptSetter, [_,_]=(_))
207 (ln 51): Call(Method, print(_))
208 (ln 51): Pop
209 (ln 52): Load(Module, Class("System"))
210 (ln 52): Load(Module, Null)
211 (ln 52): Constant(24: "a")
212 (ln 52): Constant(25: "b")
213 (ln 52): Constant(26: "c")
214 (ln 52): Constant(27: "value")
215 (ln 52): Call(SubscriptSetter, [_,_,_]=(_))
216 (ln 52): Call(Method, print(_))
217 (ln 52): Pop
218 (ln 53): EndModule
219 (ln 53): Return
220 (ln 53): End
+(_) Constants:
00: "infix "
01: " + "
02: ""
+(_) Code:
00 (ln 2): Load(Module, Class("List"))
01 (ln 2): Call(Method, new())
02 (ln 2): Constant(0: "infix ")
03 (ln 2): Call(Method, addCore_(_))
04 (ln 2): Load(Local, 0)
05 (ln 2): Call(Method, addCore_(_))
06 (ln 2): Constant(1: " + ")
07 (ln 2): Call(Method, addCore_(_))
08 (ln 2): Load(Local, 1)
09 (ln 2): Call(Method, addCore_(_))
10 (ln 2): Constant(2: "")
11 (ln 2): Call(Method, addCore_(_))
12 (ln 2): Call(Method, join())
13 (ln 2): Return
14 (ln 2): End
-(_) Constants:
00: "infix "
01: " - "
02: ""
-(_) Code:
00 (ln 3): Load(Module, Class("List"))
01 (ln 3): Call(Method, new())
02 (ln 3): Constant(0: "infix ")
03 (ln 3): Call(Method, addCore_(_))
04 (ln 3): Load(Local, 0)
05 (ln 3): Call(Method, addCore_(_))
06 (ln 3): Constant(1: " - ")
07 (ln 3): Call(Method, addCore_(_))
08 (ln 3): Load(Local, 1)
09 (ln 3): Call(Method, addCore_(_))
10 (ln 3): Constant(2: "")
11 (ln 3): Call(Method, addCore_(_))
12 (ln 3): Call(Method, join())
13 (ln 3): Return
14 (ln 3): End
*(_) Constants:
00: "infix "
01: " * "
02: ""
*(_) Code:
00 (ln 4): Load(Module, Class("List"))
01 (ln 4): Call(Method, new())
02 (ln 4): Constant(0: "infix ")
03 (ln 4): Call(Method, addCore_(_))
04 (ln 4): Load(Local, 0)
05 (ln 4): Call(Method, addCore_(_))
06 (ln 4): Constant(1: " * ")
07 (ln 4): Call(Method, addCore_(_))
08 (ln 4): Load(Local, 1)
09 (ln 4): Call(Method, addCore_(_))
10 (ln 4): Constant(2: "")
11 (ln 4): Call(Method, addCore_(_))
12 (ln 4): Call(Method, join())
13 (ln 4): Return
14 (ln 4): End
/(_) Constants:
00: "infix "
01: " / "
02: ""
/(_) Code:
00 (ln 5): Load(Module, Class("List"))
01 (ln 5): Call(Method, new())
02 (ln 5): Constant(0: "infix ")
03 (ln 5): Call(Method, addCore_(_))
04 (ln 5): Load(Local, 0)
05 (ln 5): Call(Method, addCore_(_))
06 (ln 5): Constant(1: " / ")
07 (ln 5): Call(Method, addCore_(_))
08 (ln 5): Load(Local, 1)
09 (ln 5): Call(Method, addCore_(_))
10 (ln 5): Constant(2: "")
11 (ln 5): Call(Method, addCore_(_))
12 (ln 5): Call(Method, join())
13 (ln 5): Return
14 (ln 5): End
%(_) Constants:
00: "infix "
01: " % "
02: ""
%(_) Code:
00 (ln 6): Load(Module, Class("List"))
01 (ln 6): Call(Method, new())
02 (ln 6): Constant(0: "infix ")
03 (ln 6): Call(Method, addCore_(_))
04 (ln 6): Load(Local, 0)
05 (ln 6): Call(Method, addCore_(_))
06 (ln 6): Constant(1: " % ")
07 (ln 6): Call(Method, addCore_(_))
08 (ln 6): Load(Local, 1)
09 (ln 6): Call(Method, addCore_(_))
10 (ln 6): Constant(2: "")
11 (ln 6): Call(Method, addCore_(_))
12 (ln 6): Call(Method, join())
13 (ln 6): Return
14 (ln 6): End
<(_) Constants:
00: "infix "
01: " < "
02: ""
<(_) Code:
00 (ln 7): Load(Module, Class("List"))
01 (ln 7): Call(Method, new())
02 (ln 7): Constant(0: "infix ")
03 (ln 7): Call(Method, addCore_(_))
04 (ln 7): Load(Local, 0)
05 (ln 7): Call(Method, addCore_(_))
06 (ln 7): Constant(1: " < ")
07 (ln 7): Call(Method, addCore_(_))
08 (ln 7): Load(Local, 1)
09 (ln 7): Call(Method, addCore_(_))
10 (ln 7): Constant(2: "")
11 (ln 7): Call(Method, addCore_(_))
12 (ln 7): Call(Method, join())
13 (ln 7): Return
14 (ln 7): End
>(_) Constants:
00: "infix "
01: " > "
02: ""
>(_) Code:
00 (ln 8): Load(Module, Class("List"))
01 (ln 8): Call(Method, new())
02 (ln 8): Constant(0: "infix ")
03 (ln 8): Call(Method, addCore_(_))
04 (ln 8): Load(Local, 0)
05 (ln 8): Call(Method, addCore_(_))
06 (ln 8): Constant(1: " > ")
07 (ln 8): Call(Method, addCore_(_))
08 (ln 8): Load(Local, 1)
09 (ln 8): Call(Method, addCore_(_))
10 (ln 8): Constant(2: "")
11 (ln 8): Call(Method, addCore_(_))
12 (ln 8): Call(Method, join())
13 (ln 8): Return
14 (ln 8): End
<=(_) Constants:
00: "infix "
01: " <= "
02: ""
<=(_) Code:
00 (ln 9): Load(Module, Class("List"))
01 (ln 9): Call(Method, new())
02 (ln 9): Constant(0: "infix ")
03 (ln 9): Call(Method, addCore_(_))
04 (ln 9): Load(Local, 0)
05 (ln 9): Call(Method, addCore_(_))
06 (ln 9): Constant(1: " <= ")
07 (ln 9): Call(Method, addCore_(_))
08 (ln 9): Load(Local, 1)
09 (ln 9): Call(Method, addCore_(_))
10 (ln 9): Constant(2: "")
11 (ln 9): Call(Method, addCore_(_))
12 (ln 9): Call(Method, join())
13 (ln 9): Return
14 (ln 9): End
>=(_) Constants:
00: "infix "
01: " >= "
02: ""
>=(_) Code:
00 (ln 10): Load(Module, Class("List"))
01 (ln 10): Call(Method, new())
02 (ln 10): Constant(0: "infix ")
03 (ln 10): Call(Method, addCore_(_))
04 (ln 10): Load(Local, 0)
05 (ln 10): Call(Method, addCore_(_))
06 (ln 10): Constant(1: " >= ")
07 (ln 10): Call(Method, addCore_(_))
08 (ln 10): Load(Local, 1)
09 (ln 10): Call(Method, addCore_(_))
10 (ln 10): Constant(2: "")
11 (ln 10): Call(Method, addCore_(_))
12 (ln 10): Call(Method, join())
13 (ln 10): Return
14 (ln 10): End
==(_) Constants:
00: "infix "
01: " == "
02: ""
==(_) Code:
00 (ln 11): Load(Module, Class("List"))
01 (ln 11): Call(Method, new())
02 (ln 11): Constant(0: "infix ")
03 (ln 11): Call(Method, addCore_(_))
04 (ln 11): Load(Local, 0)
05 (ln 11): Call(Method, addCore_(_))
06 (ln 11): Constant(1: " == ")
07 (ln 11): Call(Method, addCore_(_))
08 (ln 11): Load(Local, 1)
09 (ln 11): Call(Method, addCore_(_))
10 (ln 11): Constant(2: "")
11 (ln 11): Call(Method, addCore_(_))
12 (ln 11): Call(Method, join())
13 (ln 11): Return
14 (ln 11): End
!=(_) Constants:
00: "infix "
01: " != "
02: ""
!=(_) Code:
00 (ln 12): Load(Module, Class("List"))
01 (ln 12): Call(Method, new())
02 (ln 12): Constant(0: "infix ")
03 (ln 12): Call(Method, addCore_(_))
04 (ln 12): Load(Local, 0)
05 (ln 12): Call(Method, addCore_(_))
06 (ln 12): Constant(1: " != ")
07 (ln 12): Call(Method, addCore_(_))
08 (ln 12): Load(Local, 1)
09 (ln 12): Call(Method, addCore_(_))
10 (ln 12): Constant(2: "")
11 (ln 12): Call(Method, addCore_(_))
12 (ln 12): Call(Method, join())
13 (ln 12): Return
14 (ln 12): End
&(_) Constants:
00: "infix "
01: " & "
02: ""
&(_) Code:
00 (ln 13): Load(Module, Class("List"))
01 (ln 13): Call(Method, new())
02 (ln 13): Constant(0: "infix ")
03 (ln 13): Call(Method, addCore_(_))
04 (ln 13): Load(Local, 0)
05 (ln 13): Call(Method, addCore_(_))
06 (ln 13): Constant(1: " & ")
07 (ln 13): Call(Method, addCore_(_))
08 (ln 13): Load(Local, 1)
09 (ln 13): Call(Method, addCore_(_))
10 (ln 13): Constant(2: "")
11 (ln 13): Call(Method, addCore_(_))
12 (ln 13): Call(Method, join())
13 (ln 13): Return
14 (ln 13): End
|(_) Constants:
00: "infix "
01: " | "
02: ""
|(_) Code:
00 (ln 14): Load(Module, Class("List"))
01 (ln 14): Call(Method, new())
02 (ln 14): Constant(0: "infix ")
03 (ln 14): Call(Method, addCore_(_))
04 (ln 14): Load(Local, 0)
05 (ln 14): Call(Method, addCore_(_))
06 (ln 14): Constant(1: " | ")
07 (ln 14): Call(Method, addCore_(_))
08 (ln 14): Load(Local, 1)
09 (ln 14): Call(Method, addCore_(_))
10 (ln 14): Constant(2: "")
11 (ln 14): Call(Method, addCore_(_))
12 (ln 14): Call(Method, join())
13 (ln 14): Return
14 (ln 14): End
is(_) Constants:
00: "infix "
01: " is "
02: ""
is(_) Code:
00 (ln 15): Load(Module, Class("List"))
01 (ln 15): Call(Method, new())
02 (ln 15): Constant(0: "infix ")
03 (ln 15): Call(Method, addCore_(_))
04 (ln 15): Load(Local, 0)
05 (ln 15): Call(Method, addCore_(_))
06 (ln 15): Constant(1: " is ")
07 (ln 15): Call(Method, addCore_(_))
08 (ln 15): Load(Local, 1)
09 (ln 15): Call(Method, addCore_(_))
10 (ln 15): Constant(2: "")
11 (ln 15): Call(Method, addCore_(_))
12 (ln 15): Call(Method, join())
13 (ln 15): Return
14 (ln 15): End
! Constants:
00: "prefix !"
01: ""
! Code:
00 (ln 17): Load(Module, Class("List"))
01 (ln 17): Call(Method, new())
02 (ln 17): Constant(0: "prefix !")
03 (ln 17): Call(Method, addCore_(_))
04 (ln 17): Load(Local, 0)
05 (ln 17): Call(Method, addCore_(_))
06 (ln 17): Constant(1: "")
07 (ln 17): Call(Method, addCore_(_))
08 (ln 17): Call(Method, join())
09 (ln 17): Return
10 (ln 17): End
~ Constants:
00: "prefix ~"
01: ""
~ Code:
00 (ln 18): Load(Module, Class("List"))
01 (ln 18): Call(Method, new())
02 (ln 18): Constant(0: "prefix ~")
03 (ln 18): Call(Method, addCore_(_))
04 (ln 18): Load(Local, 0)
05 (ln 18): Call(Method, addCore_(_))
06 (ln 18): Constant(1: "")
07 (ln 18): Call(Method, addCore_(_))
08 (ln 18): Call(Method, join())
09 (ln 18): Return
10 (ln 18): End
- Constants:
00: "prefix -"
01: ""
- Code:
00 (ln 19): Load(Module, Class("List"))
01 (ln 19): Call(Method, new())
02 (ln 19): Constant(0: "prefix -")
03 (ln 19): Call(Method, addCore_(_))
04 (ln 19): Load(Local, 0)
05 (ln 19): Call(Method, addCore_(_))
06 (ln 19): Constant(1: "")
07 (ln 19): Call(Method, addCore_(_))
08 (ln 19): Call(Method, join())
09 (ln 19): Return
10 (ln 19): End
[_] Constants:
00: ""
01: " 1-subscript "
[_] Code:
00 (ln 21): Load(Module, Class("List"))
01 (ln 21): Call(Method, new())
02 (ln 21): Constant(0: "")
03 (ln 21): Call(Method, addCore_(_))
04 (ln 21): Load(Local, 0)
05 (ln 21): Call(Method, addCore_(_))
06 (ln 21): Constant(1: " 1-subscript ")
07 (ln 21): Call(Method, addCore_(_))
08 (ln 21): Load(Local, 1)
09 (ln 21): Call(Method, addCore_(_))
10 (ln 21): Constant(0: "")
11 (ln 21): Call(Method, addCore_(_))
12 (ln 21): Call(Method, join())
13 (ln 21): Return
14 (ln 21): End
[_,_] Constants:
00: ""
01: " 2-subscript "
02: " "
[_,_] Code:
00 (ln 22): Load(Module, Class("List"))
01 (ln 22): Call(Method, new())
02 (ln 22): Constant(0: "")
03 (ln 22): Call(Method, addCore_(_))
04 (ln 22): Load(Local, 0)
05 (ln 22): Call(Method, addCore_(_))
06 (ln 22): Constant(1: " 2-subscript ")
07 (ln 22): Call(Method, addCore_(_))
08 (ln 22): Load(Local, 1)
09 (ln 22): Call(Method, addCore_(_))
10 (ln 22): Constant(2: " ")
11 (ln 22): Call(Method, addCore_(_))
12 (ln 22): Load(Local, 2)
13 (ln 22): Call(Method, addCore_(_))
14 (ln 22): Constant(0: "")
15 (ln 22): Call(Method, addCore_(_))
16 (ln 22): Call(Method, join())
17 (ln 22): Return
18 (ln 22): End
[_,_,_] Constants:
00: ""
01: " 3-subscript "
02: " "
[_,_,_] Code:
00 (ln 23): Load(Module, Class("List"))
01 (ln 23): Call(Method, new())
02 (ln 23): Constant(0: "")
03 (ln 23): Call(Method, addCore_(_))
04 (ln 23): Load(Local, 0)
05 (ln 23): Call(Method, addCore_(_))
06 (ln 23): Constant(1: " 3-subscript ")
07 (ln 23): Call(Method, addCore_(_))
08 (ln 23): Load(Local, 1)
09 (ln 23): Call(Method, addCore_(_))
10 (ln 23): Constant(2: " ")
11 (ln 23): Call(Method, addCore_(_))
12 (ln 23): Load(Local, 2)
13 (ln 23): Call(Method, addCore_(_))
14 (ln 23): Constant(2: " ")
15 (ln 23): Call(Method, addCore_(_))
16 (ln 23): Load(Local, 3)
17 (ln 23): Call(Method, addCore_(_))
18 (ln 23): Constant(0: "")
19 (ln 23): Call(Method, addCore_(_))
20 (ln 23): Call(Method, join())
21 (ln 23): Return
22 (ln 23): End
[_]=(_) Constants:
00: ""
01: " 1-subscript setter "
02: " = "
[_]=(_) Code:
00 (ln 24): Load(Module, Class("List"))
01 (ln 24): Call(Method, new())
02 (ln 24): Constant(0: "")
03 (ln 24): Call(Method, addCore_(_))
04 (ln 24): Load(Local, 0)
05 (ln 24): Call(Method, addCore_(_))
06 (ln 24): Constant(1: " 1-subscript setter ")
07 (ln 24): Call(Method, addCore_(_))
08 (ln 24): Load(Local, 1)
09 (ln 24): Call(Method, addCore_(_))
10 (ln 24): Constant(2: " = ")
11 (ln 24): Call(Method, addCore_(_))
12 (ln 24): Load(Local, 2)
13 (ln 24): Call(Method, addCore_(_))
14 (ln 24): Constant(0: "")
15 (ln 24): Call(Method, addCore_(_))
16 (ln 24): Call(Method, join())
17 (ln 24): Return
18 (ln 24): End
[_,_]=(_) Constants:
00: ""
01: " 2-subscript setter "
02: " "
03: " = "
[_,_]=(_) Code:
00 (ln 25): Load(Module, Class("List"))
01 (ln 25): Call(Method, new())
02 (ln 25): Constant(0: "")
03 (ln 25): Call(Method, addCore_(_))
04 (ln 25): Load(Local, 0)
05 (ln 25): Call(Method, addCore_(_))
06 (ln 25): Constant(1: " 2-subscript setter ")
07 (ln 25): Call(Method, addCore_(_))
08 (ln 25): Load(Local, 1)
09 (ln 25): Call(Method, addCore_(_))
10 (ln 25): Constant(2: " ")
11 (ln 25): Call(Method, addCore_(_))
12 (ln 25): Load(Local, 2)
13 (ln 25): Call(Method, addCore_(_))
14 (ln 25): Constant(3: " = ")
15 (ln 25): Call(Method, addCore_(_))
16 (ln 25): Load(Local, 3)
17 (ln 25): Call(Method, addCore_(_))
18 (ln 25): Constant(0: "")
19 (ln 25): Call(Method, addCore_(_))
20 (ln 25): Call(Method, join())
21 (ln 25): Return
22 (ln 25): End
[_,_,_]=(_) Constants:
00: ""
01: " 3-subscript setter "
02: " "
03: " = "
[_,_,_]=(_) Code:
00 (ln 26): Load(Module, Class("List"))
01 (ln 26): Call(Method, new())
02 (ln 26): Constant(0: "")
03 (ln 26): Call(Method, addCore_(_))
04 (ln 26): Load(Local, 0)
05 (ln 26): Call(Method, addCore_(_))
06 (ln 26): Constant(1: " 3-subscript setter ")
07 (ln 26): Call(Method, addCore_(_))
08 (ln 26): Load(Local, 1)
09 (ln 26): Call(Method, addCore_(_))
10 (ln 26): Constant(2: " ")
11 (ln 26): Call(Method, addCore_(_))
12 (ln 26): Load(Local, 2)
13 (ln 26): Call(Method, addCore_(_))
14 (ln 26): Constant(2: " ")
15 (ln 26): Call(Method, addCore_(_))
16 (ln 26): Load(Local, 3)
17 (ln 26): Call(Method, addCore_(_))
18 (ln 26): Constant(3: " = ")
19 (ln 26): Call(Method, addCore_(_))
20 (ln 26): Load(Local, 4)
21 (ln 26): Call(Method, addCore_(_))
22 (ln 26): Constant(0: "")
23 (ln 26): Call(Method, addCore_(_))
24 (ln 26): Call(Method, join())
25 (ln 26): Return
26 (ln 26): End
