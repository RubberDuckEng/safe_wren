Function { constants: [String(""), String(""), String("foo"), String("foo"), String(" \t\r\nfoo b\tar \t\r\n"), String("foo b\tar \t\r\n"), String(" \t\r\n \t\r\n"), String(""), String(" \n\n\tsøméஃthîng"), String("søméஃthîng"), String(""), String("abc"), String(""), String("foo"), String("abc"), String("foo"), String("foo"), String(""), String("foo"), String("cbacbfoobarab"), String("abc"), String("foobarab"), String("abcbacba"), String("abc"), String(""), String("søméஃthîng"), String("ஃmésø"), String("thîng"), String(" \t\ra\0b"), String("a\0b"), String("\0a\0b\0c\0"), String("a\0"), String("b\0c\0")], code: [Load(Variable { scope: Module, index: 9 }), Constant(0), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 0 }, 43), Constant(1), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(2), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 0 }, 43), Constant(3), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(4), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 0 }, 43), Constant(5), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(6), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 0 }, 43), Constant(7), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(8), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 0 }, 43), Constant(9), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(10), Constant(11), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(12), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(13), Constant(14), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(15), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(16), Constant(17), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(18), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(19), Constant(20), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(21), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(22), Constant(23), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(24), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(25), Constant(26), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(27), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(28), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 0 }, 43), Constant(29), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, Load(Variable { scope: Module, index: 9 }), Constant(30), Constant(31), Call(Signature { bare_name: "trimStart", call_type: Method, arity: 1 }, 44), Constant(32), Call(Signature { bare_name: "==", call_type: Method, arity: 1 }, 1), Call(Signature { bare_name: "print", call_type: Method, arity: 1 }, 42), Pop, End, End] }
00: Load(Module 9: Class("System"))
01: Constant(0: String(""))
02: Call(Method: trimStart() 43)
03: Constant(1: String(""))
04: Call(Method: ==(_) 1)
05: Call(Method: print(_) 42)
06: Pop
07: Load(Module 9: Class("System"))
08: Constant(2: String("foo"))
09: Call(Method: trimStart() 43)
10: Constant(3: String("foo"))
11: Call(Method: ==(_) 1)
12: Call(Method: print(_) 42)
13: Pop
14: Load(Module 9: Class("System"))
15: Constant(4: String(" \t\r\nfoo b\tar \t\r\n"))
16: Call(Method: trimStart() 43)
17: Constant(5: String("foo b\tar \t\r\n"))
18: Call(Method: ==(_) 1)
19: Call(Method: print(_) 42)
20: Pop
21: Load(Module 9: Class("System"))
22: Constant(6: String(" \t\r\n \t\r\n"))
23: Call(Method: trimStart() 43)
24: Constant(7: String(""))
25: Call(Method: ==(_) 1)
26: Call(Method: print(_) 42)
27: Pop
28: Load(Module 9: Class("System"))
29: Constant(8: String(" \n\n\tsøméஃthîng"))
30: Call(Method: trimStart() 43)
31: Constant(9: String("søméஃthîng"))
32: Call(Method: ==(_) 1)
33: Call(Method: print(_) 42)
34: Pop
35: Load(Module 9: Class("System"))
36: Constant(10: String(""))
37: Constant(11: String("abc"))
38: Call(Method: trimStart(_) 44)
39: Constant(12: String(""))
40: Call(Method: ==(_) 1)
41: Call(Method: print(_) 42)
42: Pop
43: Load(Module 9: Class("System"))
44: Constant(13: String("foo"))
45: Constant(14: String("abc"))
46: Call(Method: trimStart(_) 44)
47: Constant(15: String("foo"))
48: Call(Method: ==(_) 1)
49: Call(Method: print(_) 42)
50: Pop
51: Load(Module 9: Class("System"))
52: Constant(16: String("foo"))
53: Constant(17: String(""))
54: Call(Method: trimStart(_) 44)
55: Constant(18: String("foo"))
56: Call(Method: ==(_) 1)
57: Call(Method: print(_) 42)
58: Pop
59: Load(Module 9: Class("System"))
60: Constant(19: String("cbacbfoobarab"))
61: Constant(20: String("abc"))
62: Call(Method: trimStart(_) 44)
63: Constant(21: String("foobarab"))
64: Call(Method: ==(_) 1)
65: Call(Method: print(_) 42)
66: Pop
67: Load(Module 9: Class("System"))
68: Constant(22: String("abcbacba"))
69: Constant(23: String("abc"))
70: Call(Method: trimStart(_) 44)
71: Constant(24: String(""))
72: Call(Method: ==(_) 1)
73: Call(Method: print(_) 42)
74: Pop
75: Load(Module 9: Class("System"))
76: Constant(25: String("søméஃthîng"))
77: Constant(26: String("ஃmésø"))
78: Call(Method: trimStart(_) 44)
79: Constant(27: String("thîng"))
80: Call(Method: ==(_) 1)
81: Call(Method: print(_) 42)
82: Pop
83: Load(Module 9: Class("System"))
84: Constant(28: String(" \t\ra\0b"))
85: Call(Method: trimStart() 43)
86: Constant(29: String("a\0b"))
87: Call(Method: ==(_) 1)
88: Call(Method: print(_) 42)
89: Pop
90: Load(Module 9: Class("System"))
91: Constant(30: String("\0a\0b\0c\0"))
92: Constant(31: String("a\0"))
93: Call(Method: trimStart(_) 44)
94: Constant(32: String("b\0c\0"))
95: Call(Method: ==(_) 1)
96: Call(Method: print(_) 42)
97: Pop
98: End
99: End
