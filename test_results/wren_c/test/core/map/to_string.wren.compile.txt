<script> Constants:
00: "1"
01: "2"
02: 1
03: 2
04: "Foo"
05: Fn(init new())
06: Fn()
07: Fn(toString)
08: 3
09: 4
10: 5
11: 6
12: "{1: 2, 3: 4, 5: 6}"
13: "{1: 2, 5: 6, 3: 4}"
14: "{3: 4, 1: 2, 5: 6}"
15: "{3: 4, 5: 6, 1: 2}"
16: "{5: 6, 1: 2, 3: 4}"
17: "{5: 6, 3: 4, 1: 2}"
<script> Code:
00 (ln 2): Load(Module, Class("System"))
01 (ln 2): Load(Module, Class("Map"))
02 (ln 2): Call(Method, new())
03 (ln 2): Call(Getter, toString)
04 (ln 2): Call(Method, print(_))
05 (ln 2): Pop
06 (ln 5): Load(Module, Class("System"))
07 (ln 5): Load(Module, Class("Map"))
08 (ln 5): Call(Method, new())
09 (ln 5): Constant(0: "1")
10 (ln 5): Constant(1: "2")
11 (ln 5): Call(Method, addCore_(_,_))
12 (ln 5): Call(Getter, toString)
13 (ln 5): Call(Method, print(_))
14 (ln 5): Pop
15 (ln 8): Load(Module, Class("System"))
16 (ln 8): Load(Module, Class("Map"))
17 (ln 8): Call(Method, new())
18 (ln 8): Constant(2: 1)
19 (ln 8): Load(Module, Class("Map"))
20 (ln 8): Call(Method, new())
21 (ln 8): Constant(3: 2)
22 (ln 8): Load(Module, Class("Map"))
23 (ln 8): Call(Method, new())
24 (ln 8): Call(Method, addCore_(_,_))
25 (ln 8): Call(Method, addCore_(_,_))
26 (ln 8): Call(Method, print(_))
27 (ln 8): Pop
28 (ln 11): Constant(4: "Foo")
29 (ln 11): Load(Module, Class("Object"))
30 (ln 11): Class(0 fields)
31 (ln 11): Store(Module)
32 (ln 11): Pop
33 (ln 12): Closure(5, [])
34 (ln 12): Load(Module, Null)
35 (ln 12): Method(instance, init new())
36 (ln 12): Closure(6, [])
37 (ln 12): Load(Module, Null)
38 (ln 12): Method(static, new())
39 (ln 13): Closure(7, [])
40 (ln 13): Load(Module, Null)
41 (ln 13): Method(instance, toString)
42 (ln 16): Load(Module, Class("System"))
43 (ln 16): Load(Module, Class("Map"))
44 (ln 16): Call(Method, new())
45 (ln 16): Constant(2: 1)
46 (ln 16): Load(Module, Null)
47 (ln 16): Call(Method, new())
48 (ln 16): Call(Method, addCore_(_,_))
49 (ln 16): Call(Method, print(_))
50 (ln 16): Pop
51 (ln 20): Load(Module, Class("Map"))
52 (ln 20): Call(Method, new())
53 (ln 20): Constant(2: 1)
54 (ln 20): Constant(3: 2)
55 (ln 20): Call(Method, addCore_(_,_))
56 (ln 20): Constant(8: 3)
57 (ln 20): Constant(9: 4)
58 (ln 20): Call(Method, addCore_(_,_))
59 (ln 20): Constant(10: 5)
60 (ln 20): Constant(11: 6)
61 (ln 20): Call(Method, addCore_(_,_))
62 (ln 20): Call(Getter, toString)
63 (ln 20): Store(Module)
64 (ln 20): Pop
65 (ln 21): Load(Module, Class("System"))
66 (ln 21): Load(Module, Null)
67 (ln 21): Constant(12: "{1: 2, 3: 4, 5: 6}")
68 (ln 21): Call(Method, ==(_))
69 (ln 21): Or(19)
70 (ln 22): Load(Module, Null)
71 (ln 22): Constant(13: "{1: 2, 5: 6, 3: 4}")
72 (ln 22): Call(Method, ==(_))
73 (ln 22): Or(15)
74 (ln 23): Load(Module, Null)
75 (ln 23): Constant(14: "{3: 4, 1: 2, 5: 6}")
76 (ln 23): Call(Method, ==(_))
77 (ln 23): Or(11)
78 (ln 24): Load(Module, Null)
79 (ln 24): Constant(15: "{3: 4, 5: 6, 1: 2}")
80 (ln 24): Call(Method, ==(_))
81 (ln 24): Or(7)
82 (ln 25): Load(Module, Null)
83 (ln 25): Constant(16: "{5: 6, 1: 2, 3: 4}")
84 (ln 25): Call(Method, ==(_))
85 (ln 25): Or(3)
86 (ln 26): Load(Module, Null)
87 (ln 26): Constant(17: "{5: 6, 3: 4, 1: 2}")
88 (ln 26): Call(Method, ==(_))
89 (ln 26): Call(Method, print(_))
90 (ln 26): Pop
91 (ln 29): EndModule
92 (ln 29): Return
93 (ln 29): End
init new() Code:
00 (ln 12): Load(Local, 0)
01 (ln 12): Return
02 (ln 12): End
 Code:
00 (ln 12): Construct
01 (ln 12): Call(Method, init new())
02 (ln 12): Return
03 (ln 12): End
toString Constants:
00: "Foo.toString"
toString Code:
00 (ln 13): Constant(0: "Foo.toString")
01 (ln 13): Return
02 (ln 13): End
