<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 3): Call(new())
02 (ln 3): Store(Module)
03 (ln 3): Pop
04 (ln 5): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
06 (ln 5): Call(...(_))
07 (ln 5): Null
08 (ln 5): Load(Local, 1)
09 (ln 5): Load(Local, 2)
10 (ln 5): Call(iterate(_))
11 (ln 5): Store(Local, 2)
12 (ln 5): JumpIfFalse(20)
13 (ln 5): Load(Local, 1)
14 (ln 5): Load(Local, 2)
15 (ln 5): Call(iteratorValue(_))
16 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 6): Load(Local, 3)
18 (ln 6): Load(Local, 3)
19 (ln 6): Call([_]=(_))
20 (ln 6): Pop
21 (ln 8): Load(Local, 3)
22 (ln 8): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
23 (ln 8): Call(>=(_))
24 (ln 8): JumpIfFalse(6)
25 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
26 (ln 8): Load(Local, 3)
27 (ln 8): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
28 (ln 8): Call(-(_))
29 (ln 8): Call(remove(_))
30 (ln 8): Pop
31 (ln 9): Pop
32 (ln 9): Loop(25)
33 (ln 9): Pop
34 (ln 9): Pop
35 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
36 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
37 (ln 11): Call(count)
38 (ln 11): Call(print(_))
39 (ln 11): Pop
40 (ln 12): EndModule
41 (ln 12): Return
42 (ln 12): End
