<script> Code:
00 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Null
02 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 1): Call(is(_))
04 (ln 1): Call(print(_))
05 (ln 1): Pop
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Null
08 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 2): Call(is(_))
10 (ln 2): Call(print(_))
11 (ln 2): Pop
12 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 3): Null
14 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
15 (ln 3): Call(is(_))
16 (ln 3): Call(print(_))
17 (ln 3): Pop
18 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 4): Null
20 (ln 4): Call(type)
21 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
22 (ln 4): Call(==(_))
23 (ln 4): Call(print(_))
24 (ln 4): Pop
25 (ln 5): EndModule
26 (ln 5): Return
27 (ln 5): End
