<script> Constants:
00: Fn(new(_) block argument)
01: Fn(new(_) block argument)
02: Fn(new(_) block argument)
03: Fn(new(_) block argument)
04: Fn(new(_) block argument)
05: "after"
<script> Code:
00 (ln 4): Load(Module, Class("Fiber"))
01 (ln 8): Closure(0, [])
02 (ln 8): Call(new(_))
03 (ln 8): Store(Module)
04 (ln 8): Pop
05 (ln 10): Load(Module, Class("Fiber"))
06 (ln 14): Closure(1, [])
07 (ln 14): Call(new(_))
08 (ln 14): Store(Module)
09 (ln 14): Pop
10 (ln 16): Load(Module, Class("Fiber"))
11 (ln 20): Closure(2, [])
12 (ln 20): Call(new(_))
13 (ln 20): Store(Module)
14 (ln 20): Pop
15 (ln 22): Load(Module, Class("Fiber"))
16 (ln 26): Closure(3, [])
17 (ln 26): Call(new(_))
18 (ln 26): Store(Module)
19 (ln 26): Pop
20 (ln 28): Load(Module, Class("Fiber"))
21 (ln 32): Closure(4, [])
22 (ln 32): Call(new(_))
23 (ln 32): Store(Module)
24 (ln 32): Pop
25 (ln 34): Load(Module, Null)
26 (ln 34): Call(call())
27 (ln 34): Pop
28 (ln 42): Load(Module, Class("System"))
29 (ln 42): Constant(5: "after")
30 (ln 42): Call(print(_))
31 (ln 42): Pop
32 (ln 45): Load(Module, Class("System"))
33 (ln 45): Load(Module, Null)
34 (ln 45): Call(error)
35 (ln 45): Call(print(_))
36 (ln 45): Pop
37 (ln 46): Load(Module, Class("System"))
38 (ln 46): Load(Module, Null)
39 (ln 46): Call(error)
40 (ln 46): Call(print(_))
41 (ln 46): Pop
42 (ln 47): Load(Module, Class("System"))
43 (ln 47): Load(Module, Null)
44 (ln 47): Call(error)
45 (ln 47): Call(print(_))
46 (ln 47): Pop
47 (ln 48): Load(Module, Class("System"))
48 (ln 48): Load(Module, Null)
49 (ln 48): Call(error)
50 (ln 48): Call(print(_))
51 (ln 48): Pop
52 (ln 49): Load(Module, Class("System"))
53 (ln 49): Load(Module, Null)
54 (ln 49): Call(error)
55 (ln 49): Call(print(_))
56 (ln 49): Pop
57 (ln 50): EndModule
58 (ln 50): Return
59 (ln 50): End
new(_) block argument Constants:
00: "1 before"
01: "Abort!"
02: "1 after"
new(_) block argument Code:
00 (ln 5): Load(Module, Class("System"))
01 (ln 5): Constant(0: "1 before")
02 (ln 5): Call(print(_))
03 (ln 5): Pop
04 (ln 6): Load(Module, Class("Fiber"))
05 (ln 6): Constant(1: "Abort!")
06 (ln 6): Call(abort(_))
07 (ln 6): Pop
08 (ln 7): Load(Module, Class("System"))
09 (ln 7): Constant(2: "1 after")
10 (ln 7): Call(print(_))
11 (ln 7): Pop
12 (ln 8): Null
13 (ln 8): Return
14 (ln 8): End
new(_) block argument Constants:
00: "2 before"
01: "2 after"
new(_) block argument Code:
00 (ln 11): Load(Module, Class("System"))
01 (ln 11): Constant(0: "2 before")
02 (ln 11): Call(print(_))
03 (ln 11): Pop
04 (ln 12): Load(Module, Null)
05 (ln 12): Call(call())
06 (ln 12): Pop
07 (ln 13): Load(Module, Class("System"))
08 (ln 13): Constant(1: "2 after")
09 (ln 13): Call(print(_))
10 (ln 13): Pop
11 (ln 14): Null
12 (ln 14): Return
13 (ln 14): End
new(_) block argument Constants:
00: "3 before"
01: "3 after"
new(_) block argument Code:
00 (ln 17): Load(Module, Class("System"))
01 (ln 17): Constant(0: "3 before")
02 (ln 17): Call(print(_))
03 (ln 17): Pop
04 (ln 18): Load(Module, Null)
05 (ln 18): Call(call())
06 (ln 18): Pop
07 (ln 19): Load(Module, Class("System"))
08 (ln 19): Constant(1: "3 after")
09 (ln 19): Call(print(_))
10 (ln 19): Pop
11 (ln 20): Null
12 (ln 20): Return
13 (ln 20): End
new(_) block argument Constants:
00: "4 before"
01: "4 after"
new(_) block argument Code:
00 (ln 23): Load(Module, Class("System"))
01 (ln 23): Constant(0: "4 before")
02 (ln 23): Call(print(_))
03 (ln 23): Pop
04 (ln 24): Load(Module, Null)
05 (ln 24): Call(try())
06 (ln 24): Pop
07 (ln 25): Load(Module, Class("System"))
08 (ln 25): Constant(1: "4 after")
09 (ln 25): Call(print(_))
10 (ln 25): Pop
11 (ln 26): Null
12 (ln 26): Return
13 (ln 26): End
new(_) block argument Constants:
00: "5 before"
01: "5 after"
new(_) block argument Code:
00 (ln 29): Load(Module, Class("System"))
01 (ln 29): Constant(0: "5 before")
02 (ln 29): Call(print(_))
03 (ln 29): Pop
04 (ln 30): Load(Module, Null)
05 (ln 30): Call(call())
06 (ln 30): Pop
07 (ln 31): Load(Module, Class("System"))
08 (ln 31): Constant(1: "5 after")
09 (ln 31): Call(print(_))
10 (ln 31): Pop
11 (ln 32): Null
12 (ln 32): Return
13 (ln 32): End
