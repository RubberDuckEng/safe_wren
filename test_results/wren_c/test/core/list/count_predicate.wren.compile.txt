<script> Constants:
00: 1
01: 2
02: 3
03: Fn(count(_) block argument)
04: Fn(count(_) block argument)
05: Fn(count(_) block argument)
<script> Code:
00 (ln 1): Load(Module, Class("List"))
01 (ln 1): Call(new())
02 (ln 1): Constant(0: 1)
03 (ln 1): Call(addCore_(_))
04 (ln 1): Constant(1: 2)
05 (ln 1): Call(addCore_(_))
06 (ln 1): Constant(2: 3)
07 (ln 1): Call(addCore_(_))
08 (ln 1): Store(Module)
09 (ln 1): Pop
10 (ln 3): Load(Module, Class("System"))
11 (ln 3): Load(Module, Null)
12 (ln 3): Closure(3, [])
13 (ln 3): Call(count(_))
14 (ln 3): Call(print(_))
15 (ln 3): Pop
16 (ln 4): Load(Module, Class("System"))
17 (ln 4): Load(Module, Null)
18 (ln 4): Closure(4, [])
19 (ln 4): Call(count(_))
20 (ln 4): Call(print(_))
21 (ln 4): Pop
22 (ln 6): Load(Module, Class("System"))
23 (ln 6): Load(Module, Class("List"))
24 (ln 6): Call(new())
25 (ln 6): Closure(5, [])
26 (ln 6): Call(count(_))
27 (ln 6): Call(print(_))
28 (ln 6): Pop
29 (ln 7): EndModule
30 (ln 7): Return
31 (ln 7): End
count(_) block argument Constants:
00: 3
count(_) block argument Code:
00 (ln 3): Load(Local, 1)
01 (ln 3): Constant(0: 3)
02 (ln 3): Call(>(_))
03 (ln 3): Return
04 (ln 3): End
count(_) block argument Constants:
00: 1
count(_) block argument Code:
00 (ln 4): Load(Local, 1)
01 (ln 4): Constant(0: 1)
02 (ln 4): Call(>(_))
03 (ln 4): Return
04 (ln 4): End
count(_) block argument Code:
00 (ln 6): Boolean true
01 (ln 6): Return
02 (ln 6): End
