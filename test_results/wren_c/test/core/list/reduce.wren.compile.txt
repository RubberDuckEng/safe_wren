<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
07: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
08: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
09: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
10: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
11: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Call(new())
02 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 1): Call(addCore_(_))
04 (ln 1): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
05 (ln 1): Call(addCore_(_))
06 (ln 1): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 1): Call(addCore_(_))
08 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
09 (ln 1): Call(addCore_(_))
10 (ln 1): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 1): Call(addCore_(_))
12 (ln 1): Store(Module)
13 (ln 1): Pop
14 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
15 (ln 2): Call(new())
16 (ln 2): Constant(4: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 2): Call(addCore_(_))
18 (ln 2): Constant(5: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 2): Call(addCore_(_))
20 (ln 2): Constant(6: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
21 (ln 2): Call(addCore_(_))
22 (ln 2): Constant(7: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
23 (ln 2): Call(addCore_(_))
24 (ln 2): Constant(8: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
25 (ln 2): Call(addCore_(_))
26 (ln 2): Store(Module)
27 (ln 2): Pop
28 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
29 (ln 3): Closure(9, [])
30 (ln 3): Call(new(_))
31 (ln 3): Store(Module)
32 (ln 3): Pop
33 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
34 (ln 4): Closure(10, [])
35 (ln 4): Call(new(_))
36 (ln 4): Store(Module)
37 (ln 4): Pop
38 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
39 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
40 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
41 (ln 6): Call(reduce(_))
42 (ln 6): Call(print(_))
43 (ln 6): Pop
44 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
45 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
46 (ln 7): Constant(11: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
47 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
48 (ln 7): Call(reduce(_,_))
49 (ln 7): Call(print(_))
50 (ln 7): Pop
51 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
52 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
53 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
54 (ln 9): Call(reduce(_))
55 (ln 9): Call(print(_))
56 (ln 9): Pop
57 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
58 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
59 (ln 10): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
60 (ln 10): Call(-)
61 (ln 10): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
62 (ln 10): Call(reduce(_,_))
63 (ln 10): Call(print(_))
64 (ln 10): Pop
65 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
66 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
67 (ln 13): Constant(12: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
68 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
69 (ln 13): Call(reduce(_,_))
70 (ln 13): Call(print(_))
71 (ln 13): Pop
72 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
73 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
74 (ln 14): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
75 (ln 14): Call(reduce(_))
76 (ln 14): Call(print(_))
77 (ln 14): Pop
78 (ln 15): EndModule
79 (ln 15): Return
80 (ln 15): End
new(_) block argument Code:
00 (ln 3): Load(Local, 1)
01 (ln 3): Load(Local, 2)
02 (ln 3): Call(>(_))
03 (ln 3): JumpIfFalse(2)
04 (ln 3): Load(Local, 1)
05 (ln 3): Jump(1)
06 (ln 3): Load(Local, 2)
07 (ln 3): Return
08 (ln 3): End
new(_) block argument Code:
00 (ln 4): Load(Local, 1)
01 (ln 4): Load(Local, 2)
02 (ln 4): Call(+(_))
03 (ln 4): Return
04 (ln 4): End
