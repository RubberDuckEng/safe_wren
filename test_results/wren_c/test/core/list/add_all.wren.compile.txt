<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
01 (ln 1): Call(new())
02 (ln 1): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
03 (ln 1): Call(addCore_(_))
04 (ln 1): Store(Module)
05 (ln 1): Pop
06 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 2): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
08 (ln 2): Call(new())
09 (ln 2): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
10 (ln 2): Call(addCore_(_))
11 (ln 2): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
12 (ln 2): Call(addCore_(_))
13 (ln 2): Call(addAll(_))
14 (ln 2): Pop
15 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 3): Call(print(_))
18 (ln 3): Pop
19 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
20 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
21 (ln 4): Call(new())
22 (ln 4): Call(addAll(_))
23 (ln 4): Pop
24 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
25 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
26 (ln 5): Call(print(_))
27 (ln 5): Pop
28 (ln 6): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
29 (ln 6): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
30 (ln 6): Constant(4: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
31 (ln 6): Call(..(_))
32 (ln 6): Call(addAll(_))
33 (ln 6): Pop
34 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
35 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
36 (ln 7): Call(print(_))
37 (ln 7): Pop
38 (ln 10): Constant(5: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
39 (ln 10): Constant(6: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
40 (ln 10): Call(..(_))
41 (ln 10): Store(Module)
42 (ln 10): Pop
43 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
44 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
45 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
46 (ln 11): Call(addAll(_))
47 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
48 (ln 11): Call(==(_))
49 (ln 11): Call(print(_))
50 (ln 11): Pop
51 (ln 12): EndModule
52 (ln 12): Return
53 (ln 12): End
