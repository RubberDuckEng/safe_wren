<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
04: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
05: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
06: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
07: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
08: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): ImportModule("random")
01 (ln 1): Pop
02 (ln 1): ImportVariable("Random")
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
06 (ln 3): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 3): Call(new(_))
08 (ln 3): Store(Module)
09 (ln 3): Pop
10 (ln 5): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 5): Call(new())
12 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
13 (ln 5): Call(addCore_(_))
14 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
15 (ln 5): Call(addCore_(_))
16 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
17 (ln 5): Call(addCore_(_))
18 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 5): Call(addCore_(_))
20 (ln 5): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
21 (ln 5): Call(addCore_(_))
22 (ln 5): Store(Module)
23 (ln 5): Pop
24 (ln 6): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
25 (ln 6): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
26 (ln 6): Call(..(_))
27 (ln 6): Null
28 (ln 6): Load(Local, 1)
29 (ln 6): Load(Local, 2)
30 (ln 6): Call(iterate(_))
31 (ln 6): Store(Local, 2)
32 (ln 6): JumpIfFalse(18)
33 (ln 6): Load(Local, 1)
34 (ln 6): Load(Local, 2)
35 (ln 6): Call(iteratorValue(_))
36 (ln 7): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
37 (ln 7): Constant(4: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
38 (ln 7): Call(int(_))
39 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
40 (ln 8): Load(Local, 4)
41 (ln 8): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
42 (ln 8): Load(Local, 4)
43 (ln 8): Call([_])
44 (ln 8): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
45 (ln 8): Call(+(_))
46 (ln 8): Call([_]=(_))
47 (ln 8): Pop
48 (ln 9): Pop
49 (ln 9): Pop
50 (ln 9): Loop(23)
51 (ln 9): Pop
52 (ln 9): Pop
53 (ln 11): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
54 (ln 11): Null
55 (ln 11): Load(Local, 1)
56 (ln 11): Load(Local, 2)
57 (ln 11): Call(iterate(_))
58 (ln 11): Store(Local, 2)
59 (ln 11): JumpIfFalse(21)
60 (ln 11): Load(Local, 1)
61 (ln 11): Load(Local, 2)
62 (ln 11): Call(iteratorValue(_))
63 (ln 12): Load(Local, 3)
64 (ln 12): Constant(5: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
65 (ln 12): Call(<(_))
66 (ln 12): JumpIfFalse(4)
67 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
68 (ln 12): Constant(6: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
69 (ln 12): Call(print(_))
70 (ln 12): Pop
71 (ln 13): Load(Local, 3)
72 (ln 13): Constant(7: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
73 (ln 13): Call(>(_))
74 (ln 13): JumpIfFalse(4)
75 (ln 13): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
76 (ln 13): Constant(8: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
77 (ln 13): Call(print(_))
78 (ln 13): Pop
79 (ln 14): Pop
80 (ln 14): Loop(26)
81 (ln 14): Pop
82 (ln 14): Pop
83 (ln 15): EndModule
84 (ln 15): Return
85 (ln 15): End
