<script> Constants:
00: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
01: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
02: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
03: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData }
<script> Code:
00 (ln 1): ImportModule("random")
01 (ln 1): Pop
02 (ln 1): ImportVariable("Random")
03 (ln 1): Store(Module)
04 (ln 1): Pop
05 (ln 3): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
06 (ln 3): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
07 (ln 3): Call(new(_))
08 (ln 3): Store(Module)
09 (ln 3): Pop
10 (ln 4): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
11 (ln 4): Constant(0: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
12 (ln 4): Call(new(_))
13 (ln 4): Store(Module)
14 (ln 4): Pop
15 (ln 6): Constant(1: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
16 (ln 6): Store(Module)
17 (ln 6): Pop
18 (ln 7): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
19 (ln 7): Constant(3: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
20 (ln 7): Call(..(_))
21 (ln 7): Null
22 (ln 7): Load(Local, 1)
23 (ln 7): Load(Local, 2)
24 (ln 7): Call(iterate(_))
25 (ln 7): Store(Local, 2)
26 (ln 7): JumpIfFalse(16)
27 (ln 7): Load(Local, 1)
28 (ln 7): Load(Local, 2)
29 (ln 7): Call(iteratorValue(_))
30 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
31 (ln 9): Call(float())
32 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
33 (ln 9): Call(float())
34 (ln 9): Call(==(_))
35 (ln 9): JumpIfFalse(5)
36 (ln 9): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
37 (ln 9): Constant(2: HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
38 (ln 9): Call(+(_))
39 (ln 9): Store(Module)
40 (ln 9): Pop
41 (ln 10): Pop
42 (ln 10): Loop(21)
43 (ln 10): Pop
44 (ln 10): Pop
45 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
46 (ln 12): Load(Module, HeapHandle { ptr: Cell { value: TaggedPtr }, _phantom: PhantomData })
47 (ln 12): Call(print(_))
48 (ln 12): Pop
49 (ln 13): EndModule
50 (ln 13): Return
51 (ln 13): End
